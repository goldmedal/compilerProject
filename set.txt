Nullable
BinOp                : false
Block                : false
Block'               : false
Expr                 : false
Expr'                : true
ExprList             : true
ExprListTail         : false
ExprListTail'        : true
ParamDecl            : false
ParamDecl'           : true
ParamDeclList        : true
ParamDeclListTail    : false
ParamDeclListTail'   : true
Primary              : true
Primary'             : true
Program              : false
S                    : false
Stmt                 : false
StmtList             : false
StmtList'            : true
Type                 : false
UnaryOp              : false
VarDecl              : false
VarDecl'             : false
VarDeclList          : false
VarDeclList'         : true

First
BinOp                : != && * + - / < <= == > >= ||
Block                : {
Block'               : ! ( - ; break char id if int num return while {
Expr                 : ! ( - id num
Expr'                : != && * + - / < <= == > >= ||
ExprList             : ! ( - id num
ExprListTail         : ! ( - id num
ExprListTail'        : ,
ParamDecl            : char int
ParamDecl'           : [
ParamDeclList        : char int
ParamDeclListTail    : char int
ParamDeclListTail'   : ,
Primary              : ( = [
Primary'             : =
Program              : char int
S                    : char int
Stmt                 : ! ( - ; break id if num return while {
StmtList             : ! ( - ; break id if num return while {
StmtList'            : ! ( - ; break id if num return while {
Type                 : char int
UnaryOp              : ! -
VarDecl              : char int
VarDecl'             : ( ; [
VarDeclList          : char int
VarDeclList'         : char int

Follow
BinOp                : ! ( - id num
Block                : ! $ ( - ; break char else id if int num return while { }
Block'               : ! $ ( - ; break char else id if int num return while { }
Expr                 : != && ) * + , - / ; < <= == > >= ] ||
Expr'                : != && ) * + , - / ; < <= == > >= ] ||
ExprList             : )
ExprListTail         : )
ExprListTail'        : )
ParamDecl            : ) ,
ParamDecl'           : ) ,
ParamDeclList        : )
ParamDeclListTail    : )
ParamDeclListTail'   : )
Primary              : != && ) * + , - / ; < <= == > >= ] ||
Primary'             : != && ) * + , - / ; < <= == > >= ] ||
Program              : $
S                    :
Stmt                 : ! ( - ; break else id if num return while { }
StmtList             : }
StmtList'            : }
Type                 : id
UnaryOp              : ! ( - id num
VarDecl              : ! $ ( - ; break char id if int num return while {
VarDecl'             : ! $ ( - ; break char id if int num return while {
VarDeclList          : ! $ ( - ; break id if num return while {
VarDeclList'         : ! $ ( - ; break id if num return while {
